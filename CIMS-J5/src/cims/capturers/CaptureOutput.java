/**
 * CIMS - CaptureOutput - Keep track of MIDI messages generated by the agent.
 * 
 */

package cims.capturers;

import java.util.ArrayList;
import java.util.Iterator;

import cims.datatypes.MidiMessage;
import cims.supervisors.SupervisorMidi;

public class CaptureOutput {

	private SupervisorMidi supervisor;
	private MidiMessage message;
	private ArrayList<MidiMessage> onList = new ArrayList();
	
	public CaptureOutput(SupervisorMidi supervisor) {
		this.supervisor = supervisor;
	}
	
	public void in(int[] midiData) {
		message = new MidiMessage();
		message.set(midiData, true);
		//this.supervisor.txtMsg("Capture Outout: " + midiData[0] + " " + midiData[1] + " " + midiData[2]);
		
		if (message.messageType == message.NOTE_ON) {
			//this.supervisor.txtMsg("Message Type: ON");
			onList.add(message);
		}
		
		if (message.messageType == message.NOTE_OFF) {
			//this.supervisor.txtMsg("Message Type: OFF");
			deleteMatchingNoteOn(message);
		}
	}
	
	private void deleteMatchingNoteOn(MidiMessage offMessage) {
		for (int i=0; i<onList.size(); i++) {
			MidiMessage mess = (MidiMessage)onList.get(i);
			if(mess.pitch == offMessage.pitch) {
				onList.remove(i);
				i = onList.size();
			}		
		}
	}
	
	// return the number of notes currently turned on but not yet off
	public MidiMessage[] getOnNotes() {
		MidiMessage[] messages = new MidiMessage[onList.size()];
		for (int i=0; i<onList.size(); i++) {
			MidiMessage mess = (MidiMessage)onList.get(i);
			messages[i] = mess;
		}
		return messages;
	}
}

